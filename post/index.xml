<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Fun iOS</title>
    <link>https://broomburgo.github.io/fun-ios/post/</link>
    <description>Recent content in Posts on Fun iOS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/broomburgo&#34;&gt;Elviro Rocca&lt;/a&gt; 2016</copyright>
    <lastBuildDate>Sun, 19 Nov 2017 14:00:01 +0100</lastBuildDate>
    
	<atom:link href="https://broomburgo.github.io/fun-ios/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lenses and Prisms in Swift: a pragmatic approach</title>
      <link>https://broomburgo.github.io/fun-ios/post/lenses-and-prisms-in-swift-a-pragmatic-approach/</link>
      <pubDate>Sun, 19 Nov 2017 14:00:01 +0100</pubDate>
      
      <guid>https://broomburgo.github.io/fun-ios/post/lenses-and-prisms-in-swift-a-pragmatic-approach/</guid>
      <description>This is a new version of an old article about lenses and prisms in Swift. This one contains many updates and more precisely reflects how I actually use these things in my work. This is also based on a talk I gave at iOSDevUK 2017 and Mobilization Conference 2017. I&amp;rsquo;m keeping the old article in draft as reference.
 The concept of functional lens has become pretty popular in functional programming circles, and there are already good contributions for applying lenses to other, traditionally imperative/OO contexts, like Javascript.</description>
    </item>
    
    <item>
      <title>On Abstraction</title>
      <link>https://broomburgo.github.io/fun-ios/post/on-abstraction/</link>
      <pubDate>Sat, 09 Sep 2017 20:10:00 +0000</pubDate>
      
      <guid>https://broomburgo.github.io/fun-ios/post/on-abstraction/</guid>
      <description>This post is a direct answer to this other post, which itself is mostly an answer to a bunch of discussions on Twitter, talks and more posts. While this post has probably value by itself, it&amp;rsquo;s probably better to read the original post first, because I&amp;rsquo;m going to refer to some of its statements.
 There&amp;rsquo;s an interesting discussion going in the functional Swift community: whether using abstract data types, like Monoid, is actually useful, and how this relates to the way protocols are usually laid out in the standard library.</description>
    </item>
    
  </channel>
</rss>