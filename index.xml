<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fun iOS</title>
    <link>https://broomburgo.github.io/fun-ios/</link>
    <description>Recent content on Fun iOS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/broomburgo&#34;&gt;Elviro Rocca&lt;/a&gt; 2016</copyright>
    <lastBuildDate>Thu, 29 Dec 2016 11:19:50 +0100</lastBuildDate>
    
	<atom:link href="https://broomburgo.github.io/fun-ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lenses and Prisms in Swift: a pragmatic approach</title>
      <link>https://broomburgo.github.io/fun-ios/post/lenses-and-prisms-in-swift-a-pragmatic-approach/</link>
      <pubDate>Thu, 29 Dec 2016 11:19:50 +0100</pubDate>
      
      <guid>https://broomburgo.github.io/fun-ios/post/lenses-and-prisms-in-swift-a-pragmatic-approach/</guid>
      <description>The concept of functional lens has become pretty popular in functional programming circles, and there are already good contributions for applying lenses to other, traditionally imperative/OO contexts, like Javascript. Kickstarter&amp;rsquo;s own Brandon Williams has done an excellent job in introducing lenses to the Swift community, and in showing practical examples when working with something like UIView, a radically OOP construct that an iOS developer has to work with on a daily basis.</description>
    </item>
    
  </channel>
</rss>